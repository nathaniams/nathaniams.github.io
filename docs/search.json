[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nat’s Site",
    "section": "",
    "text": "This is a work in progress, but here you will find information about me, helpful R code I’ve learned since starting my Graduate Program at GMU, some helpful links, and my Redesign Project.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "My name is Nathania Stephens. I go by Nat. I am a graduate student at George Mason University. I am pursuing a MS in Data Analytics Engineering. Quite fitting, as I have always been passionate about learning and expanding my education in data discovery, literacy and coding. It is such an exciting time to learn with the growth of data and new technology such as Artificial Intelligence. In my career I have been a casual coder, finding opportunities to test out my skills when able. I hope to bring my enhanced knowledge and expanded coding skills back to the workplace to teach others and improve upon my organization’s objectives."
  },
  {
    "objectID": "Resources.html",
    "href": "Resources.html",
    "title": "Helpful Links",
    "section": "",
    "text": "Quarto websites https://quarto.org/docs/websites."
  },
  {
    "objectID": "Resources.html#helpful-sites",
    "href": "Resources.html#helpful-sites",
    "title": "Helpful Links",
    "section": "",
    "text": "Quarto websites https://quarto.org/docs/websites."
  },
  {
    "objectID": "Helpfulinfo.html",
    "href": "Helpfulinfo.html",
    "title": "Helpful R Info",
    "section": "",
    "text": "Is it a logical (Boolean), string, etc?\n\nx = 5\nclass(x)\n\n[1] \"numeric\"\n\n\nOr use is….?\n\nis.numeric(x)\n\n[1] TRUE\n\n\n\n\n\n\nx = as.character(x)\nx\n\n[1] \"5\"\n\n\n\nis.numeric(x)\n\n[1] FALSE\n\n\n\nclass(x)\n\n[1] \"character\""
  },
  {
    "objectID": "Helpfulinfo.html#data-types",
    "href": "Helpfulinfo.html#data-types",
    "title": "Helpful R Info",
    "section": "",
    "text": "Is it a logical (Boolean), string, etc?\n\nx = 5\nclass(x)\n\n[1] \"numeric\"\n\n\nOr use is….?\n\nis.numeric(x)\n\n[1] TRUE\n\n\n\n\n\n\nx = as.character(x)\nx\n\n[1] \"5\"\n\n\n\nis.numeric(x)\n\n[1] FALSE\n\n\n\nclass(x)\n\n[1] \"character\""
  },
  {
    "objectID": "Helpfulinfo.html#binary-comparison-is-it-true-or-false",
    "href": "Helpfulinfo.html#binary-comparison-is-it-true-or-false",
    "title": "Helpful R Info",
    "section": "Binary Comparison: Is it TRUE or FALSE?",
    "text": "Binary Comparison: Is it TRUE or FALSE?\nUsing variable a and b:\n\na = 5\nb = 11\n\n\nIs a equal to b?\n\n\na == b\n\n[1] FALSE\n\n\n\nIs a less than b?\n\n\na &lt; b\n\n[1] TRUE\n\n\n\nIs a greater than b?\n\n\na &gt; b\n\n[1] FALSE\n\n\n\nIs a less than or equal to b?\n\n\na &lt;= b\n\n[1] TRUE\n\n\n\nIs a greater than or equal to b?\n\n\na &gt;= b\n\n[1] FALSE\n\n\n\nIs a not equal to b?\n\n\na != b\n\n[1] TRUE"
  },
  {
    "objectID": "Helpfulinfo.html#basic-operations",
    "href": "Helpfulinfo.html#basic-operations",
    "title": "Helpful R Info",
    "section": "Basic Operations",
    "text": "Basic Operations\nFloor will round down always.\n\nx = 3.2\nfloor(x)\n\n[1] 3\n\n\nCeiling will round up always.\n\nceiling(x)\n\n[1] 4"
  },
  {
    "objectID": "Helpfulinfo.html#variables",
    "href": "Helpfulinfo.html#variables",
    "title": "Helpful R Info",
    "section": "Variables",
    "text": "Variables\nAssign multiple variables at once.\n\na = b = 11\na\n\n[1] 11\n\nb\n\n[1] 11\n\n\n\nb\n\n[1] 11\n\n\n\nRemove a Variable\n\nrm(b)\n\n##Vectors Collection of elements, like a list.\n\nmyvector = c('apple', 'banana', 'orange', 'pineapple')\nmyvector\n\n[1] \"apple\"     \"banana\"    \"orange\"    \"pineapple\""
  },
  {
    "objectID": "Helpfulinfo.html#what-does-the-colon-do-again",
    "href": "Helpfulinfo.html#what-does-the-colon-do-again",
    "title": "Helpful R Info",
    "section": "What does the colon “:” do again?",
    "text": "What does the colon “:” do again?\nCreate consecutive numbers without writing them all out using the “:”.\n\nz = c(1:10)\nz\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "Helpfulinfo.html#identify-data-types",
    "href": "Helpfulinfo.html#identify-data-types",
    "title": "Helpful R Info",
    "section": "",
    "text": "Is it a logical (Boolean), string, etc?\n\nx = 5\nclass(x)\n\n[1] \"numeric\"\n\n\nOr use is….?\n\nis.numeric(x)\n\n[1] TRUE"
  },
  {
    "objectID": "Helpfulinfo.html#change-a-data-type",
    "href": "Helpfulinfo.html#change-a-data-type",
    "title": "Helpful R Info",
    "section": "",
    "text": "x = as.character(x)\nx\n\n[1] \"5\"\n\n\n\nis.numeric(x)\n\n[1] FALSE\n\n\n\nclass(x)\n\n[1] \"character\""
  },
  {
    "objectID": "Helpfulinfo.html#remove-a-variable",
    "href": "Helpfulinfo.html#remove-a-variable",
    "title": "Helpful R Info",
    "section": "Remove a Variable",
    "text": "Remove a Variable\n\nrm(b)\n\n#Vectors Collection of elements, like a list.\n\nmyvector = c('apple', 'banana', 'orange', 'pineapple')\nmyvector\n\n[1] \"apple\"     \"banana\"    \"orange\"    \"pineapple\""
  },
  {
    "objectID": "Helpfulinfo.html#what-directory-am-i-currently-in",
    "href": "Helpfulinfo.html#what-directory-am-i-currently-in",
    "title": "Helpful R Info",
    "section": "What directory am I currently in?",
    "text": "What directory am I currently in?\n\ngetwd()"
  },
  {
    "objectID": "Helpfulinfo.html#how-do-i-change-my-directory",
    "href": "Helpfulinfo.html#how-do-i-change-my-directory",
    "title": "Helpful R Info",
    "section": "How do I change my directory?",
    "text": "How do I change my directory?\n\nsetwd(\"EnTeR NeW PaTh\") # use // or \\ for windows OS"
  },
  {
    "objectID": "Helpfulinfo.html#view",
    "href": "Helpfulinfo.html#view",
    "title": "Helpful R Info",
    "section": "View",
    "text": "View\nTo see a data frame use “View”\n\nView(penguins)"
  },
  {
    "objectID": "Helpfulinfo.html#summary",
    "href": "Helpfulinfo.html#summary",
    "title": "Helpful R Info",
    "section": "Summary",
    "text": "Summary\nSummary will provide a summary of the rows, including NA rows.\n\nsummary(penguins)\n\n      species          island       bill_len        bill_dep    \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n  flipper_len      body_mass        sex           year     \n Min.   :172.0   Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0   1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0   Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9   Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0   3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0   Max.   :6300                Max.   :2009  \n NA's   :2       NA's   :2"
  },
  {
    "objectID": "Helpfulinfo.html#get-current-directory",
    "href": "Helpfulinfo.html#get-current-directory",
    "title": "Helpful R Info",
    "section": "Get current directory",
    "text": "Get current directory\nGet the current working directory you are in.\n\ngetwd()"
  },
  {
    "objectID": "Helpfulinfo.html#change-directory",
    "href": "Helpfulinfo.html#change-directory",
    "title": "Helpful R Info",
    "section": "Change directory",
    "text": "Change directory\nChange your directory another location\n\nsetwd(\"EnTeR NeW PaTh\") # use // or \\ for windows OS"
  },
  {
    "objectID": "Helpfulinfo.html#glimpse",
    "href": "Helpfulinfo.html#glimpse",
    "title": "Helpful R Info",
    "section": "Glimpse",
    "text": "Glimpse\nUse “glimpse” to see the number of rows, columns, and each of the column names with their data type.\n\nglimpse(penguins)"
  },
  {
    "objectID": "Helpfulinfo.html#head",
    "href": "Helpfulinfo.html#head",
    "title": "Helpful R Info",
    "section": "Head",
    "text": "Head\nSee the first few rows of the data frame.\n\nhead(penguins)\n\n  species    island bill_len bill_dep flipper_len body_mass    sex year\n1  Adelie Torgersen     39.1     18.7         181      3750   male 2007\n2  Adelie Torgersen     39.5     17.4         186      3800 female 2007\n3  Adelie Torgersen     40.3     18.0         195      3250 female 2007\n4  Adelie Torgersen       NA       NA          NA        NA   &lt;NA&gt; 2007\n5  Adelie Torgersen     36.7     19.3         193      3450 female 2007\n6  Adelie Torgersen     39.3     20.6         190      3650   male 2007"
  },
  {
    "objectID": "Helpfulinfo.html#structure",
    "href": "Helpfulinfo.html#structure",
    "title": "Helpful R Info",
    "section": "Structure",
    "text": "Structure\n\nstr(penguins)\n\n'data.frame':   344 obs. of  8 variables:\n $ species    : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island     : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_len   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_dep   : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_len: int  181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass  : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex        : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year       : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ..."
  },
  {
    "objectID": "Helpfulinfo.html#check-for-nas",
    "href": "Helpfulinfo.html#check-for-nas",
    "title": "Helpful R Info",
    "section": "Check for NAs",
    "text": "Check for NAs\nCheck for NAs or not available/ missing values. Then determine what you will do with them. Will you get rid of them or insert a value? This only tells you yes and no there are NA values and how much but it wont tell you where those NAs are. However, summary above shows what columns they are in.x\n\ntable(is.na(penguins))\n\n\nFALSE  TRUE \n 2733    19"
  },
  {
    "objectID": "Redesign.html",
    "href": "Redesign.html",
    "title": "Redesign Project",
    "section": "",
    "text": "For this project, an Outforia 2022 article on “The USA’s Search and Rescue Hotspots,” was chosen. Within the article there are four tables consisting of either National Parks or States, and their corresponding counts for search and Rescues (SAR) incidents. For this project, two of the four tables were chosen for a redesign.\nWhile the article is informative and helps readers understand which US National Parks could be considered most dangerous, the goal of this project was to enhance the visualization through best practices and improved graph design using R.\nThe article focuses on Search and Rescue incidents that occurred between 2018-2020 within US National Parks. Considering the context and the author’s statement at the bottom of the article, this article and tables were likely created for readers who enjoy the outdoors, hiking, exploring and soaking in the beauty of national parks. It is also likely that the article is intended to help novice outdoor adventurers by providing awareness into the highest number of search and rescue events.This helps readers make informed decisions regarding their next outdoor adventure!\nThe first table provides the top 16 national parks with the highest number of incidents between 2018-2020. Some of the disadvantages of this table is that it is a table, while simple and easy to read, it does not provide quick comparison like a bar chart would offer. Another consideration is the unnecessary visual at the top of the table. Above the table are the three parks with the highest number of incidents. The only additional information provided are the states the parks reside in; however, this is easily overlooked based on their position, color, and pretty yet distracting pictures.\n\n\n\n\n\n\n\nNPS Most Search and Rescues by Outforia\n\n\nThe second table provides the top 20 US States with the most search and rescue incidents. Yes, Virginia made the list. In this table we have more information on total search and rescue incidents, but grouped by State instead of individual parks. This provides a holistic view of incidents across a given state. Again we are given a table, which doesn’t offer fast comparison and the top three states which offer no additional information from the table but does offer a picture of the states’ flags.\n\n\n\n\n\n\n\nStates Most Search and Rescue by Outforia"
  },
  {
    "objectID": "index.html#welcome-to-my-site.",
    "href": "index.html#welcome-to-my-site.",
    "title": "Nat’s Site",
    "section": "",
    "text": "This is a work in progress, but here you will find information about me, helpful R code I’ve learned since starting my Graduate Program at GMU, some helpful links, and my Redesign Project.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Redesign.html#redesign-of-table-1",
    "href": "Redesign.html#redesign-of-table-1",
    "title": "Redesign Project",
    "section": "Redesign of Table 1",
    "text": "Redesign of Table 1\nIn this redesign, a horizontal bar chart is used. This allows for easy reading of the park names while still ordering the number of incidents from high to low. This chart also provides quick comparison of the bar sizes."
  },
  {
    "objectID": "Redesign.html#redesign-of-table-2",
    "href": "Redesign.html#redesign-of-table-2",
    "title": "Redesign Project",
    "section": "Redesign of Table 2",
    "text": "Redesign of Table 2\nIn this redesign, table 2 is transformed to provide an interactive map."
  },
  {
    "objectID": "Redesign.html#the-original-design",
    "href": "Redesign.html#the-original-design",
    "title": "Redesign Project",
    "section": "",
    "text": "For this project, an Outforia 2022 article on “The USA’s Search and Rescue Hotspots,” was chosen. Within the article there are four tables consisting of either National Parks or States, and their corresponding counts for search and Rescues (SAR) incidents. For this project, two of the four tables were chosen for a redesign.\nWhile the article is informative and helps readers understand which US National Parks could be considered most dangerous, the goal of this project was to enhance the visualization through best practices and improved graph design using R.\nThe article focuses on Search and Rescue incidents that occurred between 2018-2020 within US National Parks. Considering the context and the author’s statement at the bottom of the article, this article and tables were likely created for readers who enjoy the outdoors, hiking, exploring and soaking in the beauty of national parks. It is also likely that the article is intended to help novice outdoor adventurers by providing awareness into the highest number of search and rescue events.This helps readers make informed decisions regarding their next outdoor adventure!\nThe first table provides the top 16 national parks with the highest number of incidents between 2018-2020. Some of the disadvantages of this table is that it is a table, while simple and easy to read, it does not provide quick comparison like a bar chart would offer. Another consideration is the unnecessary visual at the top of the table. Above the table are the three parks with the highest number of incidents. The only additional information provided are the states the parks reside in; however, this is easily overlooked based on their position, color, and pretty yet distracting pictures.\n\n\n\n\n\n\n\nNPS Most Search and Rescues by Outforia\n\n\nThe second table provides the top 20 US States with the most search and rescue incidents. Yes, Virginia made the list. In this table we have more information on total search and rescue incidents, but grouped by State instead of individual parks. This provides a holistic view of incidents across a given state. Again we are given a table, which doesn’t offer fast comparison and the top three states which offer no additional information from the table but does offer a picture of the states’ flags.\n\n\n\n\n\n\n\nStates Most Search and Rescue by Outforia"
  },
  {
    "objectID": "Redesign.html#about-the-data",
    "href": "Redesign.html#about-the-data",
    "title": "Redesign Project",
    "section": "About the data",
    "text": "About the data\nTo obtain the data Outforia submitted a freedom of information request to the National Park Authority for search and rescue incidents between 2018-2020 for all US national parks. In cases where national parks spanned more than one state, Outforia counted the number of incidents for each state. In this redesign project, data from the article and tables were used.\nAdditional information from National Park Services (NPS) site was used to supplement additional information. For example, adding state to the national parks data."
  },
  {
    "objectID": "Redesign.html#purpose-of-redesign",
    "href": "Redesign.html#purpose-of-redesign",
    "title": "Redesign Project",
    "section": "Purpose of Redesign",
    "text": "Purpose of Redesign\nThe objectives of redesigning these tables are to provide informative graphs to help readers further interpret the data. By ensuring the graphs focus on accurate comparisons, simplified and uncluttered graphs, and appropriate context to keep the readers engaged. This will help readers make informed decisions about their next visit to a National Park.\n\nRedesign of Table 1\nIn this redesign, a horizontal bar chart is used. This allows for easy reading of the park names while still arranging the number of incidents from high to low. Also, this chart provides quick comparison for readers to easily compare bar lengths.\n\n\n\n\n\n\n\n\n\n\n\nRedesign of Table 1, another look\nIn this redesign, table 1 is transformed to provide a map view of the data. This takes a different approach to understanding the search and rescue incidents from table 1. Here we are still using the same data from table 1, but instead of representing the park the state is used instead to represent states with the most incidents. This is another way to visualize the information from table 1, although not complete. Another consideration is that some National Parks span more than one state. In this map, only one state was selected for each National Park. If data was available for each of the search and rescue events, then we could plot those events and have a more exact number of what state the incidents occurred in.\n\n\n\n\n\n\n\n\n\n\n\nRedesign of Table 1 a better look\n\n\n\n\n\n\n\n\nRedesign of Table 2\nIn table 2 we see more states with the total number of Search and Rescue incidents from 2018-2020. Here it seems like the visual is on the right track; however, after counting the states there are only 19! Oh yes, sneaky Alaska and Hawaii are not in the picture.\n\n\n\n\n\n\n\n\n\nHere we must take another approach to the map view this time using library(usmap) and library(sf).\n\n\n\n\n\n\n\n\n\nAn unusual error occurred when trying to render from R Studio to Quarto. The above map is missing the data overlay. The map generated without issues in R Studio. Hence the workaround, saving the ggplot as an image and adding to the markup.\n\nNow we have all top 20 states properly represented on the map. To reduce clutter and unnecessary information the x-axis and y-axis were removed. This is not only good practice to reduce clutter but another consideration is the placement of Alaska, Hawaii, and Puerto Rico. They are placed here to include them in the graph not to represent their locations."
  },
  {
    "objectID": "Redesign.html#references",
    "href": "Redesign.html#references",
    "title": "Redesign Project",
    "section": "References",
    "text": "References\n[1] Borg, C., 2022, “The USA’s Search And Rescue Hotspots,” Outforia. [Online]. Available: https://outforia.com/search-and-rescue-hotspots/"
  },
  {
    "objectID": "RedesignCode.html",
    "href": "RedesignCode.html",
    "title": "Redesign Code",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(leaflet)\nlibrary(tidyverse)"
  },
  {
    "objectID": "RedesignCode.html#libraries",
    "href": "RedesignCode.html#libraries",
    "title": "Redesign Code",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(leaflet)\nlibrary(tidyverse)"
  },
  {
    "objectID": "RedesignCode.html#theme",
    "href": "RedesignCode.html#theme",
    "title": "Redesign Code",
    "section": "Theme",
    "text": "Theme\n\nhw &lt;- theme_gray()+ theme(\n  plot.title=element_text(hjust=0.5),\n  plot.subtitle=element_text(hjust=0.5),\n  plot.caption=element_text(hjust=-.5),\n  \n  strip.text.y = element_blank(),\n  strip.background=element_rect(fill=rgb(.9,.95,1),\n                                colour=gray(.5), linewidth =.2),\n  \n  panel.border=element_rect(fill=FALSE,colour=gray(.70)),\n  panel.grid.minor.y = element_blank(),\n  panel.grid.minor.x = element_blank(),\n  panel.spacing.x = unit(0.10,\"cm\"),\n  panel.spacing.y = unit(0.05,\"cm\"),\n  \n  # axis.ticks.y= element_blank()\n  axis.ticks=element_blank(),\n  axis.text=element_text(colour=\"black\"),\n  axis.text.y=element_text(margin=margin(0,3,0,3)),\n  axis.text.x=element_text(margin=margin(-1,0,3,0))\n)"
  }
]